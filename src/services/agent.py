"""
Agent service for the Real Estate Agent application.

This module provides the main interface for interacting with the LangGraph
application and handling user queries.
"""

from typing import Dict, Any, Optional
from ..graph.workflow import app
from ..graph.state import State


def call_agent(prompt: str, user_id: str = "default_user") -> Dict[str, Any]:
    """
    Call the Real Estate Agent with a user prompt.
    
    Args:
        prompt: The user's question or request
        user_id: Unique identifier for the user session
        
    Returns:
        Final state after graph execution
    """
    # Initialize state
    initial_state = {
        "question": prompt,
        "context": [],
        "needs_sql": False,
        "sql_result": "",
        "llm_sql": "",
        "messages": [{"role": "user", "content": prompt}],
        "report": "",
        "needs_email": False,
        "email_state": None
    }
    
    # Stream events from the graph
    events = app.stream(
        initial_state,
        {"thread_id": user_id, "recursion_limit": 150},
        stream_mode="values"
    )
    
    last_printed = None
    final_event = None
    
    for event in events:
        msgs = event.get("messages")
        if not msgs or not isinstance(msgs, list):
            # ignore non-message stream events
            continue
        
        last = msgs[-1]
        # get content robustly (object or dict)
        try:
            content = getattr(last, "content", None) or (last.get("content") if isinstance(last, dict) else str(last))
        except Exception:
            content = str(last)
        
        # only print when content changed
        if content and content != last_printed:
            try:
                if hasattr(last, "pretty_print"):
                    last.pretty_print()
                else:
                    print(content)
            except Exception:
                print(content)
            last_printed = content
        
        final_event = event
    
    return final_event


def call_agent_silent(prompt: str, user_id: str = "default_user") -> Dict[str, Any]:
    """
    Call the Real Estate Agent without printing output.
    
    Args:
        prompt: The user's question or request
        user_id: Unique identifier for the user session
        
    Returns:
        Final state after graph execution
    """
    # Initialize state
    initial_state = {
        "question": prompt,
        "context": [],
        "needs_sql": False,
        "sql_result": "",
        "llm_sql": "",
        "messages": [{"role": "user", "content": prompt}],
        "report": "",
        "needs_email": False,
        "email_state": None
    }
    
    # Stream events from the graph
    events = app.stream(
        initial_state,
        {"thread_id": user_id, "recursion_limit": 150},
        stream_mode="values"
    )
    
    final_event = None
    for event in events:
        final_event = event
    
    return final_event


def get_agent_response(prompt: str, user_id: str = "default_user") -> str:
    """
    Get just the final response from the agent.
    
    Args:
        prompt: The user's question or request
        user_id: Unique identifier for the user session
        
    Returns:
        The final report or response from the agent
    """
    final_state = call_agent_silent(prompt, user_id)
    return final_state.get("report", "") if final_state else ""


def get_agent_sql(prompt: str, user_id: str = "default_user") -> str:
    """
    Get the SQL query generated by the agent.
    
    Args:
        prompt: The user's question or request
        user_id: Unique identifier for the user session
        
    Returns:
        The SQL query generated by the agent
    """
    final_state = call_agent_silent(prompt, user_id)
    return final_state.get("llm_sql", "") if final_state else ""


def get_agent_sql_result(prompt: str, user_id: str = "default_user") -> str:
    """
    Get the SQL execution result from the agent.
    
    Args:
        prompt: The user's question or request
        user_id: Unique identifier for the user session
        
    Returns:
        The SQL execution result
    """
    final_state = call_agent_silent(prompt, user_id)
    return final_state.get("sql_result", "") if final_state else ""
